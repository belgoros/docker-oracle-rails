default: &default
  adapter: oracle_enhanced
  encoding: unicode
  host: <%= ENV.fetch('DATABASE_HOST', 'localhost')%>
  username: <%= ENV.fetch('DB_USER', 'postgres') %>
  database: <%= ENV.fetch('DB_NAME', 'docker-oracle-rails_test_development')%>
  pool: 5
  variables:
    statement_timeout: 5000

development:
  <<: *default
  host: <%= ENV['mystore_db_host']%>
  port: <%= ENV['mystore_db_port']%>
  database: <%= ENV['mystore_db_name']%>
  username: <%= ENV['mystore_db_user']%>
  password: <%= ENV['mystore_db_password']%>


# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: docker-oracle-rails_test

# As with config/secrets.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password as a unix environment variable when you boot
# the app. Read http://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full rundown on how to provide these environment variables in a
# production deployment.
#
# On Heroku and other platform providers, you may have a full connection URL
# available as an environment variable. For example:
#
#   DATABASE_URL="oracle-enhanced://myuser:mypass@localhost/somedatabase"
#
# Note that the adapter name uses a dash instead of an underscore.
#
# You can use this database configuration with:
#
#   production:
#     url: <%= ENV['DATABASE_URL'] %>
#
production:
  <<: *default
  database: docker-oracle-rails_production
  username: docker-oracle-rails
  password: <%= ENV['DOCKER-ORACLE-RAILS_DATABASE_PASSWORD'] %>
